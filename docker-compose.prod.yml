version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: spondy-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spondy}
      POSTGRES_USER: ${POSTGRES_USER:-spondy_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-spondy_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=nb_NO.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    networks:
      - spondy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spondy_user} -d ${POSTGRES_DB:-spondy}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  backend:
    image: spondy-backend:prod
    container_name: spondy-backend-prod
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/spondy
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-spondy_user}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-spondy_secure_password_2024}
      JAVA_OPTS: "-Xmx256m -Xms128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      TZ: Europe/Oslo
    ports:
      - "127.0.0.1:8081:8080"  # Only accessible from localhost for nginx proxy
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spondy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    image: spondy-frontend:prod
    container_name: spondy-frontend-prod
    ports:
      - "127.0.0.1:8082:8080"  # Only accessible from localhost for nginx proxy
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - spondy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local

networks:
  spondy-network:
    driver: bridge 